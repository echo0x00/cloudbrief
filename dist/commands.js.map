{"version":3,"file":"commands.js","mappings":"YAuDA,SAASA,EAAaC,GACpBC,YAAc,KACdC,YAAYC,YACZD,YAAc,IAChB,CAEA,SAASE,EAAYC,GACnB,IAAMC,EAAOC,OAAOC,QAAQC,QAAQH,KAChCI,EAAU,OAEdC,QAAQC,IAAI,2BAADC,OAA4BH,IAEvCJ,EAAKI,QAAQI,SAAS,CAAEC,aAAcT,IAAQ,SAAUU,GAClDA,EAAYC,SAAWV,OAAOW,kBAAkBC,WAClDT,EAAUM,EAAYI,MACtBT,QAAQC,IAAI,2BAADC,OAA4BH,KAGvCC,QAAQU,MAAM,wBAAyBL,EAAYK,MAEvD,IAEIf,EAAKgB,WAAaf,OAAOgB,aAAaC,SAASC,SACjDnB,EAAKoB,KAAKC,SACR,8CACA,CAAEC,aAAcrB,OAAOsB,aAAaC,OACpC,SAAUd,GACJA,EAAYC,SAAWV,OAAOW,kBAAkBa,OAClDpB,QAAQU,MAAM,sBAAuBL,EAAYK,MAAMW,SAEvDrB,QAAQC,IAAI,iCAEhB,GAGN,CAnFAL,OAAO0B,SAAQ,WAAO,IAEtB1B,OAAO2B,WAAa,SAAUC,GAC5B5B,OAAOC,QAAQC,QAAQH,KAAK8B,gBAAgB7B,OAAO8B,UAAUC,YAAalC,EAC5E,EAkFAG,OAAOgC,QAAQC,UAAU,UA5EzB,SAAgBC,GAad,IAAMnC,EAAOC,OAAOC,QAAQC,QAAQH,KAEhCA,EAAKgB,WAAaf,OAAOgB,aAAaC,SAASC,UAGjDlB,OAAOC,QAAQkC,GAAGC,mBAAmBC,IAFjB,CAAEC,MAAO,GAAIC,OAAQ,GAAIC,iBAAiB,IAEL,SAAUC,GACjE/C,YAAc+C,EAAO5B,MACrBnB,YAAYgD,gBAAgBC,UAAU3C,OAAO4C,aAAad,UAAUe,oBAAqBrD,EAC3F,IAEAO,EAAKoB,KAAKC,SACR,8CACA,CAAEC,aAAcrB,OAAOsB,aAAaC,OACpC,SAAUd,GACJA,EAAYC,SAAWV,OAAOW,kBAAkBa,OAClDpB,QAAQU,MAAM,sBAAuBL,EAAYK,MAAMW,SAEvDrB,QAAQC,IAAI,iCAEhB,IAIN,G","sources":["webpack://office-addin-taskpane-js/./src/commands/commands.js"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n * See LICENSE in the project root for license information.\n */\n\n/* global Office */\n\nOffice.onReady(() => {});\n\nOffice.initialize = function (reason) {\n  Office.context.mailbox.item.addHandlerAsync(Office.EventType.ItemChanged, itemChanged);\n};\n\n/**\n * Shows a notification when the add-in command is executed.\n * @param event {Office.AddinCommands.Event}\n */\nfunction action(event) {\n  // const message = {\n  //   type: Office.MailboxEnums.ItemNotificationMessageType.InformationalMessage,\n  //   message: \"привет\",\n  //   icon: \"Icon.80x80\",\n  //   persistent: true,\n  // };\n\n  // // Show a notification message.\n  // Office.context.mailbox.item.notificationMessages.replaceAsync(\"action\", message);\n\n  // // Be sure to indicate when the add-in command function is complete.\n\n  const item = Office.context.mailbox.item;\n\n  if (item.itemType === Office.MailboxEnums.ItemType.Message) {\n    var dialogOptions = { width: 40, height: 60, displayInIframe: true };\n\n    Office.context.ui.displayDialogAsync(url, dialogOptions, function (result) {\n      loginDialog = result.value;\n      loginDialog.addEventHandler(Microsoft.Office.WebExtension.EventType.DialogEventReceived, dialogClosed);\n    });\n\n    item.body.setAsync(\n      \"<p>New HTML content for the email body.</p>\",\n      { coercionType: Office.CoercionType.Html },\n      function (asyncResult) {\n        if (asyncResult.status === Office.AsyncResultStatus.Failed) {\n          console.error(\"Failed to set body:\", asyncResult.error.message);\n        } else {\n          console.log(\"Body content set successfully.\");\n        }\n      }\n    );\n  }\n  // event.completed();\n}\n\nfunction dialogClosed(arg) {\n  loginDialog = null;\n  configEvent.completed();\n  configEvent = null;\n}\n\nfunction itemChanged(eventArgs) {\n  const item = Office.context.mailbox.item;\n  let subject = \"test\";\n\n  console.log(`Открыто письмо с темой: ${subject}`);\n\n  item.subject.getAsync({ asyncContext: item }, function (asyncResult) {\n    if (asyncResult.status === Office.AsyncResultStatus.Succeeded) {\n      subject = asyncResult.value;\n      console.log(`Открыто письмо с темой: ${subject}`);\n      // Добавьте здесь код для обработки вашего события\n    } else {\n      console.error(\"Ошибка получения темы\", asyncResult.error);\n    }\n  });\n\n  if (item.itemType === Office.MailboxEnums.ItemType.Message) {\n    item.body.setAsync(\n      \"<p>New HTML content for the email body.</p>\",\n      { coercionType: Office.CoercionType.Html },\n      function (asyncResult) {\n        if (asyncResult.status === Office.AsyncResultStatus.Failed) {\n          console.error(\"Failed to set body:\", asyncResult.error.message);\n        } else {\n          console.log(\"Body content set successfully.\");\n        }\n      }\n    );\n  }\n}\n\n// Register the function with Office.\nOffice.actions.associate(\"action\", action);\n"],"names":["dialogClosed","arg","loginDialog","configEvent","completed","itemChanged","eventArgs","item","Office","context","mailbox","subject","console","log","concat","getAsync","asyncContext","asyncResult","status","AsyncResultStatus","Succeeded","value","error","itemType","MailboxEnums","ItemType","Message","body","setAsync","coercionType","CoercionType","Html","Failed","message","onReady","initialize","reason","addHandlerAsync","EventType","ItemChanged","actions","associate","event","ui","displayDialogAsync","url","width","height","displayInIframe","result","addEventHandler","Microsoft","WebExtension","DialogEventReceived"],"sourceRoot":""}